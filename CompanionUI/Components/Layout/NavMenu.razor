@using CompanionData.Services
@using CompanionDomain.Models
@inject CharacterService CharacterService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">CK3 Ruler Designer</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (_characters != null)
        {
            @foreach (var character in _characters)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@($"/character/{character.Id}")">
                        <span class="" aria-hidden="true"></span> @character.Name
                    </NavLink>
                </div>
            }
        }
        <div class="border-t border-white my-4"></div>
        <div class="nav-item px-3 ">
            <NavLink class="nav-link" href="/AddCharacter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Create character
            </NavLink>
        </div>
    </nav>
</div>

@code {

    private IEnumerable<Character> _characters;

    protected override void OnInitialized()
    {
        _characters = CharacterService.GetAllCharacters();

        CharacterService.CharactersChanged += (sender, args) =>
        {
            _characters = CharacterService.GetAllCharacters();
            InvokeAsync(StateHasChanged); // Ensure re-render on UI thread
        };
    }


}